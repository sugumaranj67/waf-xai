# report_generator.py

import json
import os
from datetime import datetime
from fpdf import FPDF

LOG_FILE = "logs/alerts.json"
REPORT_FILE = "reports/waf_xai_report.pdf"

class PDFReport(FPDF):
    def header(self):
        self.set_font("Arial", "B", 14)
        self.cell(0, 10, "WAF-XAI Threat Report", ln=True, align="C")
        self.set_font("Arial", "", 10)
        self.cell(0, 10, f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", ln=True, align="C")
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font("Arial", "I", 8)
        self.cell(0, 10, "Generated by WAF-XAI", align="C")

    def add_summary(self, alerts):
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "Summary", ln=True)
        self.set_font("Arial", "", 11)

        total = len(alerts)
        xss = sum(1 for a in alerts if a["attack_type"] == "XSS")
        sqli = sum(1 for a in alerts if a["attack_type"] == "SQLi")

        self.cell(0, 10, f"Total Attacks: {total}", ln=True)
        self.cell(0, 10, f"XSS: {xss}", ln=True)
        self.cell(0, 10, f"SQL Injection: {sqli}", ln=True)
        self.ln(5)

    def add_table(self, alerts):
        self.set_font("Arial", "B", 11)
        self.cell(40, 10, "Time", border=1)
        self.cell(30, 10, "IP", border=1)
        self.cell(25, 10, "Type", border=1)
        self.cell(25, 10, "Severity", border=1)
        self.cell(70, 10, "Explanation", border=1)
        self.ln()

        self.set_font("Arial", "", 10)
        for alert in alerts:
            self.cell(40, 10, alert["timestamp"][:19], border=1)
            self.cell(30, 10, alert["client_ip"], border=1)
            self.cell(25, 10, alert["attack_type"], border=1)
            self.cell(25, 10, alert["severity"], border=1)
            explanation = alert["explanation"][:60] + "..." if len(alert["explanation"]) > 60 else alert["explanation"]
            self.cell(70, 10, explanation, border=1)
            self.ln()

def generate_report():
    if not os.path.exists(LOG_FILE):
        print("No alerts found. Log file does not exist.")
        return

    with open(LOG_FILE, "r") as f:
        alerts = [json.loads(line) for line in f if line.strip()]

    if not alerts:
        print("No alerts to report.")
        return

    os.makedirs("reports", exist_ok=True)
    pdf = PDFReport()
    pdf.add_page()
    pdf.add_summary(alerts)
    pdf.add_table(alerts)
    pdf.output(REPORT_FILE)
    print(f"âœ… Report generated: {REPORT_FILE}")

if __name__ == "__main__":
    generate_report()